//
//  Currying.swift
//  MonadicParser
//
//  Created by Artem Bobrov on 09.07.2020.
//
// Autogenerated by generate_currying.py

// swiftlint:disable all

/// Generated curry functions up to 13 parameters. 

/// Curry function from for function with 2 arguments
public func curry<X, B, R>(_ f: @escaping (X, B) -> R) -> (X) -> (B) -> R {
    return { x in { b in f(x, b) } }
}

/// Curry function from for function with 3 arguments
public func curry<X, B, V, R>(_ f: @escaping (X, B, V) -> R) -> (X) -> (B) -> (V) -> R {
    return { x in { b in { v in f(x, b, v) } } }
}

/// Curry function from for function with 4 arguments
public func curry<X, B, V, Z, R>(_ f: @escaping (X, B, V, Z) -> R) -> (X) -> (B) -> (V) -> (Z) -> R {
    return { x in { b in { v in { z in f(x, b, v, z) } } } }
}

/// Curry function from for function with 5 arguments
public func curry<X, B, V, Z, U, R>(_ f: @escaping (X, B, V, Z, U) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> R {
    return { x in { b in { v in { z in { u in f(x, b, v, z, u) } } } } }
}

/// Curry function from for function with 6 arguments
public func curry<X, B, V, Z, U, Y, R>(_ f: @escaping (X, B, V, Z, U, Y) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> R {
    return { x in { b in { v in { z in { u in { y in f(x, b, v, z, u, y) } } } } } }
}

/// Curry function from for function with 7 arguments
public func curry<X, B, V, Z, U, Y, L, R>(_ f: @escaping (X, B, V, Z, U, Y, L) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> R {
    return { x in { b in { v in { z in { u in { y in { l in f(x, b, v, z, u, y, l) } } } } } } }
}

/// Curry function from for function with 8 arguments
public func curry<X, B, V, Z, U, Y, L, M, R>(_ f: @escaping (X, B, V, Z, U, Y, L, M) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> (M) -> R {
    return { x in { b in { v in { z in { u in { y in { l in { m in f(x, b, v, z, u, y, l, m) } } } } } } } }
}

/// Curry function from for function with 9 arguments
public func curry<X, B, V, Z, U, Y, L, M, D, R>(_ f: @escaping (X, B, V, Z, U, Y, L, M, D) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> (M) -> (D) -> R {
    return { x in { b in { v in { z in { u in { y in { l in { m in { d in f(x, b, v, z, u, y, l, m, d) } } } } } } } } }
}

/// Curry function from for function with 10 arguments
public func curry<X, B, V, Z, U, Y, L, M, D, N, R>(_ f: @escaping (X, B, V, Z, U, Y, L, M, D, N) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> (M) -> (D) -> (N) -> R {
    return { x in { b in { v in { z in { u in { y in { l in { m in { d in { n in f(x, b, v, z, u, y, l, m, d, n) } } } } } } } } } }
}

/// Curry function from for function with 11 arguments
public func curry<X, B, V, Z, U, Y, L, M, D, N, O, R>(_ f: @escaping (X, B, V, Z, U, Y, L, M, D, N, O) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> (M) -> (D) -> (N) -> (O) -> R {
    return { x in { b in { v in { z in { u in { y in { l in { m in { d in { n in { o in f(x, b, v, z, u, y, l, m, d, n, o) } } } } } } } } } } }
}

/// Curry function from for function with 12 arguments
public func curry<X, B, V, Z, U, Y, L, M, D, N, O, A, R>(_ f: @escaping (X, B, V, Z, U, Y, L, M, D, N, O, A) -> R) -> (X) -> (B) -> (V) -> (Z) -> (U) -> (Y) -> (L) -> (M) -> (D) -> (N) -> (O) -> (A) -> R {
    return { x in { b in { v in { z in { u in { y in { l in { m in { d in { n in { o in { a in f(x, b, v, z, u, y, l, m, d, n, o, a) } } } } } } } } } } } }
}
